import streamlit as st
import openai
from gtts import gTTS
import base64
import os
import tempfile
import requests
import random
from io import BytesIO
import qrcode
from streamlit_dropzone import dropzone

# Set page configuration
st.set_page_config(
    page_title="Ph√¢n t√≠ch th√¥ng tin x·∫•u ƒë·ªôc",
    page_icon="pic/iconfisc.png",
    layout="wide"
)

# PWA manifest and iOS icon
st.markdown(
    """
<link rel="manifest" href="/manifest.json">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<link rel="apple-touch-icon" href="/pic/iconfisc.png">
    """,
    unsafe_allow_html=True
)

# Instruction modal state
if "show_instructions" not in st.session_state:
    st.session_state.show_instructions = False

if st.button("C√†i ph·∫ßn m·ªÅm v·ªÅ ƒëi·ªán tho·∫°i"):
    st.session_state.show_instructions = True

if st.session_state.show_instructions:
    st.markdown("---")
    device = st.radio("Ch·ªçn thi·∫øt b·ªã c·ªßa b·∫°n:", ["iOS", "Android"])
    if device == "iOS":
        st.subheader("üõà H∆∞·ªõng d·∫´n Th√™m v√†o M√†n h√¨nh ch√≠nh (iOS)")
        st.write("""
        1. Nh·∫•n n√∫t **Chia s·∫ª** (bi·ªÉu t∆∞·ª£ng ‚¨ÜÔ∏è) ·ªü d∆∞·ªõi c√πng Safari.  
        2. Ch·ªçn **Th√™m v√†o M√†n h√¨nh ch√≠nh**.  
        3. ƒê·∫∑t t√™n (m·∫∑c ƒë·ªãnh ‚ÄúPh√¢n t√≠ch th√¥ng tin x·∫•u ƒë·ªôc‚Äù) r·ªìi nh·∫•n **Th√™m**.
        """)
    else:
        st.subheader("üõà T·∫£i v√† C√†i APK (Android)")
        apk_url = "http://raw.githubusercontent.com/congpro123/fisc_web/main/FISC.apk"
        # download button
        st.download_button(
            label="‚¨áÔ∏è T·∫£i APK v·ªÅ m√°y",
            data=requests.get(apk_url).content,
            file_name="FISC.apk",
            mime="application/vnd.android.package-archive"
        )
        st.write("Sau khi t·∫£i xong, b·∫•m v√†o file **FISC.apk** ƒë·ªÉ ti·∫øn h√†nh c√†i app v·ªÅ m√°y.")
        # QR code
        qr = qrcode.make(apk_url)
        buf = BytesIO()
        qr.save(buf, format="PNG")
        st.image(buf.getvalue(), caption="Qu√©t QR ƒë·ªÉ t·∫£i APK", width=200)
    if st.button("ƒê√£ hi·ªÉu"):
        st.session_state.show_instructions = False
    st.markdown("---")

# CAPTCHA setup
if "captcha_q" not in st.session_state:
    a, b = random.randint(1, 9), random.randint(1, 9)
    st.session_state.captcha_q = f"{a} + {b}"
    st.session_state.captcha_a = str(a + b)

# OpenAI config
openai.api_key = st.secrets["OPENAI_API_KEY"]
ADMIN_ENDPOINT = "https://congpro.pythonanywhere.com/api/reports"

# Session defaults
for key, default in {
    "result": "",
    "ready": False,
    "content": "",
    "image_files": [],
    "show_report": False
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

# Analysis function
def analyze(content: str, image_files) -> str:
    """G·ª≠i vƒÉn b·∫£n + ·∫£nh l√™n GPT ƒë·ªÉ ph√¢n lo·∫°i theo HD 99-HD/BTGTW."""
    try:
        # Chu·∫©n b·ªã message
        messages = [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": f"B·∫°n l√† m·ªôt chuy√™n gia truy·ªÅn th√¥ng v√† an ninh th√¥ng tin, c√≥ nhi·ªám v·ª• ƒë√°nh gi√° n·ªôi dung vƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh (n·∫øu c√≥ m√¥ t·∫£ n·ªôi dung h√¨nh ·∫£nh) v√† ph√¢n lo·∫°i th√¥ng tin theo h∆∞·ªõng d·∫´n s·ªë 99-HD/BTGTW ng√†y 20/3/2023 c·ªßa Ban Tuy√™n gi√°o Trung ∆∞∆°ng. Vui l√≤ng th·ª±c hi·ªán c√°c y√™u c·∫ßu sau: 1. Ph√¢n lo·∫°i n·ªôi dung ƒë·∫ßu v√†o (vƒÉn b·∫£n ho·∫∑c m√¥ t·∫£ ·∫£nh) th√†nh m·ªôt trong ba nh√≥m: - Th√¥ng tin t√≠ch c·ª±c - Th√¥ng tin trung l·∫≠p - Th√¥ng tin x·∫•u ƒë·ªôc 2. Gi·∫£i th√≠ch l√Ω do ph√¢n lo·∫°i, ƒë·ªëi chi·∫øu v·ªõi c√°c d·∫•u hi·ªáu trong h∆∞·ªõng d·∫´n s·ªë 99-HD/BTGTW: - V·ªÅ h√¨nh th·ª©c (ngu·ªìn, c√°ch tr√¨nh b√†y, ƒë·ªãnh d·∫°ng) - V·ªÅ n·ªôi dung (c√≥ thu·ªôc m·ªôt trong c√°c nh√≥m n·ªôi dung ƒë∆∞·ª£c li·ªát k√™ ·ªü m·ª•c I ho·∫∑c II c·ªßa h∆∞·ªõng d·∫´n hay kh√¥ng) 3. N·∫øu n·ªôi dung l√† x·∫•u ƒë·ªôc, h√£y ch·ªâ r√µ d·∫•u hi·ªáu c·ª• th·ªÉ: v√≠ d·ª• nh∆∞ xuy√™n t·∫°c l·ªãch s·ª≠, chia r·∫Ω d√¢n t·ªôc, k√≠ch ƒë·ªông vi ph·∫°m ph√°p lu·∫≠t‚Ä¶ (li√™n h·ªá c·ª• th·ªÉ v·ªõi 1 trong 12 ƒëi·ªÉm trong m·ª•c II.b) 4. N·∫øu n·ªôi dung l√† t√≠ch c·ª±c, h√£y ch·ªâ r√µ y·∫øu t·ªë n√†o th·ªÉ hi·ªán t√≠nh t√≠ch c·ª±c, v√≠ d·ª• nh∆∞ tuy√™n truy·ªÅn ch·ªß tr∆∞∆°ng ch√≠nh s√°ch, bi·ªÉu d∆∞∆°ng g∆∞∆°ng ng∆∞·ªùi t·ªët vi·ªác t·ªët, ph·∫£n b√°c lu·∫≠n ƒëi·ªáu sai tr√°i‚Ä¶ 5. K·∫øt th√∫c b·∫±ng k·∫øt lu·∫≠n ph√¢n lo·∫°i: 'Th√¥ng tin t√≠ch c·ª±c', 'Th√¥ng tin trung l·∫≠p', ho·∫∑c 'Th√¥ng tin x·∫•u ƒë·ªôc'. --- D·ªØ li·ªáu ƒë·∫ßu v√†o c·∫ßn ƒë√°nh gi√°(H√£y lu√¥n nh·ªõ r·∫±ng n·∫øu l√† ·∫£nh th√¨ b·∫•t c·ª© h√¨nh n√†o c√≥ 3 s·ªçc ƒë·ªè v√† n·ªÅn v√†ng th√¨ ƒë·ªÅu l√† x·∫•u ƒë·ªôc, v√¨ n√≥ t∆∞·ª£ng tr∆∞ng cho l√° c·ªù Vi·ªát Nam C·ªông Ho√†): {content}"}
                    ]
                }
            ]
        # Th√™m ·∫£nh
        for file in image_files:
            img_bytes = file.read()
            img_b64 = base64.b64encode(img_bytes).decode("utf-8")
            messages[0]["content"].append({
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{img_b64}"
                }
            })

        # G·ªçi API ChatCompletion
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=1500
        )
        return resp.choices[0].message.content

    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi API: {e}"

# TTS function
def text_to_speech(text: str) -> str:
    tts = gTTS(text=text, lang="vi")
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    tts.save(tmp.name)
    return tmp.name

# Main UI
if not st.session_state.show_report:
    col_icon, col_title = st.columns([0.05, 0.95])
    with col_icon:
        st.image("pic/iconfisc.png", width=93)
    with col_title:
        st.title("Ph√¢n t√≠ch th√¥ng tin x·∫•u ƒë·ªôc")
    st.markdown("---")

    # CAPTCHA input
    answer = st.text_input(f"üîí CAPTCHA: {st.session_state.captcha_q} = ?", key="captcha_input")

    # Content and image dropzone
    col1, col2 = st.columns([2, 1])
    with col1:
        content = st.text_area(
            "‚úçÔ∏è Nh·∫≠p n·ªôi dung c·∫ßn ph√¢n t√≠ch",
            height=200,
            value=st.session_state.content
        )
    with col2:
        image_files = dropzone(
            label="üñºÔ∏è K√©o th·∫£ ho·∫∑c paste ·∫£nh (jpg/png)",
            accept_multiple_files=True,
            file_types=["png", "jpg", "jpeg"],
            paste=True,
            key="dropzone"
        )

    if st.button("üöÄ Ph√¢n t√≠ch"):
        # Check CAPTCHA
        if answer != st.session_state.captcha_a:
            st.error("‚ùå CAPTCHA kh√¥ng ƒë√∫ng, vui l√≤ng th·ª≠ l·∫°i.")
        elif not content and not image_files:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ho·∫∑c upload ·∫£nh.")
        else:
            st.session_state.content = content
            st.session_state.image_files = image_files
            with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch..."):
                st.session_state.result = analyze(content, image_files)
                st.session_state.ready = True
            # Reset CAPTCHA
            a, b = random.randint(1, 9), random.randint(1, 9)
            st.session_state.captcha_q = f"{a} + {b}"
            st.session_state.captcha_a = str(a + b)
            st.session_state.captcha_input = ""

    if st.session_state.ready:
        st.markdown("### üìã K·∫øt qu·∫£ ph√¢n lo·∫°i:")
        st.write(st.session_state.result)
        if st.button("üîä Nghe k·∫øt qu·∫£"):
            mp3_path = text_to_speech(st.session_state.result)
            st.audio(open(mp3_path, "rb").read(), format="audio/mp3")
        if st.button("üìù B√°o c√°o"):
            st.session_state.show_report = True

else:
    st.title("üìù Form B√°o C√°o")
    st.markdown("---")
    report_type = st.selectbox(
        "Lo·∫°i b√°o c√°o",
        [
            "Tin gi·∫£", "Xuy√™n t·∫°c l·ªãch s·ª≠", "K√≠ch ƒë·ªông b·∫°o l·ª±c",
            "Chia r·∫Ω d√¢n t·ªôc", "X√∫c ph·∫°m t·ªï ch·ª©c/nh√¢n v·∫≠t", "Th√¥ng tin sai s·ª± th·∫≠t"
        ]
    )
    extra_info = st.text_area("üîé Th√¥ng tin b·ªï sung", height=150)

    col_a, col_b = st.columns(2)
    with col_a:
        submitted = st.button("G·ª≠i")
    with col_b:
        cancelled = st.button("Hu·ª∑")

    if cancelled:
        st.session_state.show_report = False
    if submitted:
        data = {
            "type": report_type,
            "article": st.session_state.content,
            "extra_info": extra_info,
            "classification": st.session_state.result
        }
        files = []
        for file in st.session_state.image_files:
            b = file.read()
            files.append(("images", (file.name, b, file.type)))
            file.seek(0)
        try:
            r = requests.post(ADMIN_ENDPOINT, data=data, files=files, timeout=10)
            r.raise_for_status()
            st.success("‚úÖ ƒê√£ g·ª≠i b√°o c√°o l√™n h·ªá th·ªëng qu·∫£n tr·ªã.")
        except Exception as e:
            st.error(f"‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c: {e}")
        finally:
            st.session_state.show_report = False
