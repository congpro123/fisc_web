import streamlit as st
import openai
from gtts import gTTS
import base64
import os
import tempfile
import requests
import random
import qrcode
from io import BytesIO

# --- Page config ---
st.set_page_config(
    page_title="Ph√¢n t√≠ch th√¥ng tin x·∫•u ƒë·ªôc",
    page_icon="pic/iconfisc.png",
    layout="wide"
)

# --- PWA & iOS ---
st.markdown(
    """
<link rel="manifest" href="/manifest.json">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<link rel="apple-touch-icon" href="/pic/iconfisc.png">
    """,
    unsafe_allow_html=True
)

# --- State flags ---
for flag in ("play_audio", "audio_embed", "captcha_reset", "show_instructions"):
    if flag not in st.session_state:
        st.session_state[flag] = False

# --- Audio state defaults ---
if "audio_embed" not in st.session_state:
    st.session_state.audio_embed = ""

# --- CAPTCHA init ---
if "captcha_q" not in st.session_state or st.session_state.captcha_reset:
    a, b = random.randint(1, 9), random.randint(1, 9)
    st.session_state.captcha_q = f"{a} + {b} = ?"
    st.session_state.captcha_a = str(a + b)
    st.session_state.captcha_reset = False

# --- Config & secrets ---
openai.api_key = st.secrets["OPENAI_API_KEY"]
ADMIN_ENDPOINT = "https://congpro.pythonanywhere.com/api/reports"

# --- Session defaults ---
for key, default in {
    "content": "",
    "image_files": [],
    "result": "",
    "ready": False,
    "show_report": False
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

# --- Helper functions ---
def analyze(content: str, image_files) -> str:
    """G·ª≠i vƒÉn b·∫£n + ·∫£nh l√™n GPT ƒë·ªÉ ph√¢n lo·∫°i theo HD 99-HD/BTGTW."""
    try:
        # Chu·∫©n b·ªã message
        messages = [
            {
                "role": "user",
                "content": [
                    {
                      "type": "text", "text": f"B·∫°n l√† m·ªôt chuy√™n gia truy·ªÅn th√¥ng v√† an ninh th√¥ng tin, c√≥ nhi·ªám v·ª• ƒë√°nh gi√° n·ªôi dung vƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh (n·∫øu c√≥ m√¥ t·∫£ n·ªôi dung h√¨nh ·∫£nh) v√† ph√¢n lo·∫°i th√¥ng tin theo h∆∞·ªõng d·∫´n s·ªë 99-HD/BTGTW ng√†y 20/3/2023 c·ªßa Ban Tuy√™n gi√°o Trung ∆∞∆°ng. Vui l√≤ng th·ª±c hi·ªán c√°c y√™u c·∫ßu sau: 1. Ph√¢n lo·∫°i n·ªôi dung ƒë·∫ßu v√†o (vƒÉn b·∫£n ho·∫∑c m√¥ t·∫£ ·∫£nh) th√†nh m·ªôt trong ba nh√≥m: - Th√¥ng tin t√≠ch c·ª±c - Th√¥ng tin trung l·∫≠p - Th√¥ng tin x·∫•u ƒë·ªôc 2. Gi·∫£i th√≠ch l√Ω do ph√¢n lo·∫°i, ƒë·ªëi chi·∫øu v·ªõi c√°c d·∫•u hi·ªáu trong h∆∞·ªõng d·∫´n s·ªë 99-HD/BTGTW: - V·ªÅ h√¨nh th·ª©c (ngu·ªìn, c√°ch tr√¨nh b√†y, ƒë·ªãnh d·∫°ng) - V·ªÅ n·ªôi dung (c√≥ thu·ªôc m·ªôt trong c√°c nh√≥m n·ªôi dung ƒë∆∞·ª£c li·ªát k√™ ·ªü m·ª•c I ho·∫∑c II c·ªßa h∆∞·ªõng d·∫´n hay kh√¥ng) 3. N·∫øu n·ªôi dung l√† x·∫•u ƒë·ªôc, h√£y ch·ªâ r√µ d·∫•u hi·ªáu c·ª• th·ªÉ: v√≠ d·ª• nh∆∞ xuy√™n t·∫°c l·ªãch s·ª≠, chia r·∫Ω d√¢n t·ªôc, k√≠ch ƒë·ªông vi ph·∫°m ph√°p lu·∫≠t‚Ä¶ (li√™n h·ªá c·ª• th·ªÉ v·ªõi 1 trong 12 ƒëi·ªÉm trong m·ª•c II.b) 4. N·∫øu n·ªôi dung l√† t√≠ch c·ª±c, h√£y ch·ªâ r√µ y·∫øu t·ªë n√†o th·ªÉ hi·ªán t√≠nh t√≠ch c·ª±c, v√≠ d·ª• nh∆∞ tuy√™n truy·ªÅn ch·ªß tr∆∞∆°ng ch√≠nh s√°ch, bi·ªÉu d∆∞∆°ng g∆∞∆°ng ng∆∞·ªùi t·ªët vi·ªác t·ªët, ph·∫£n b√°c lu·∫≠n ƒëi·ªáu sai tr√°i‚Ä¶ 5. K·∫øt th√∫c b·∫±ng k·∫øt lu·∫≠n ph√¢n lo·∫°i: 'Th√¥ng tin t√≠ch c·ª±c', 'Th√¥ng tin trung l·∫≠p', ho·∫∑c 'Th√¥ng tin x·∫•u ƒë·ªôc'. --- D·ªØ li·ªáu ƒë·∫ßu v√†o c·∫ßn ƒë√°nh gi√°(H√£y lu√¥n nh·ªõ r·∫±ng n·∫øu l√† ·∫£nh th√¨ b·∫•t c·ª© h√¨nh n√†o c√≥ 3 s·ªçc ƒë·ªè v√† n·ªÅn v√†ng th√¨ ƒë·ªÅu l√† x·∫•u ƒë·ªôc, v√¨ n√≥ t∆∞·ª£ng tr∆∞ng cho l√° c·ªù Vi·ªát Nam C·ªông Ho√†): {content}"
                    }
                ]
            }
        ]
        # Th√™m ·∫£nh
        for file in image_files:
            # ƒë·ªçc h·∫øt d·ªØ li·ªáu ·∫£nh
            img_bytes = file.read()
            # chuy·ªÉn sang base64
            img_b64 = base64.b64encode(img_bytes).decode("utf-8")
            # r·ªìi ƒë√≠nh k√®m v√†o messages v·ªõi ƒë√∫ng MIME
            messages[0]["content"].append({
                "type": "image_url",
                "image_url": {
                    "url": f"data:{file.type};base64,{img_b64}"
                }
            })
            # quan tr·ªçng: reset l·∫°i con tr·ªè ƒë·ªÉ l·∫ßn sau v·∫´n ƒë·ªçc ƒë∆∞·ª£c
            file.seek(0)

        # G·ªçi API ChatCompletion
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=1500
        )
        return resp.choices[0].message.content

    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi API: {e}"

def text_to_speech(text: str) -> str:
    clean = text.replace("*", "")
    tts = gTTS(text=clean, lang="vi")
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    tts.save(tmp.name)
    return tmp.name

# --- Mobile install instructions ---
if st.button("C√†i ph·∫ßn m·ªÅm v·ªÅ ƒëi·ªán tho·∫°i"):
    st.session_state.show_instructions = True

if st.session_state.show_instructions:
    st.markdown("---")
    device = st.radio("Ch·ªçn thi·∫øt b·ªã c·ªßa b·∫°n:", ["iOS", "Android"])
    if device == "iOS":
        st.subheader("üõà Th√™m v√†o M√†n h√¨nh ch√≠nh (iOS)")
        st.write("""
1. Nh·∫•n **Chia s·∫ª** (bi·ªÉu t∆∞·ª£ng ‚¨ÜÔ∏è) d∆∞·ªõi c√πng Safari.  
2. Ch·ªçn **Th√™m v√†o M√†n h√¨nh ch√≠nh**.  
3. Nh·∫•n **Th√™m**.
""")
    else:
        st.subheader("üõà T·∫£i & C√†i APK (Android)")
        apk_url = "http://raw.githubusercontent.com/congpro123/fisc_web/main/FISC.apk"
        st.download_button("‚¨áÔ∏è T·∫£i APK v·ªÅ m√°y",
            data=requests.get(apk_url).content,
            file_name="FISC.apk",
            mime="application/vnd.android.package-archive",
        )
        st.write("Sau khi t·∫£i, m·ªü file **FISC.apk** ƒë·ªÉ c√†i.")
        qr = qrcode.make(apk_url)
        buf = BytesIO(); qr.save(buf, "PNG")
        st.image(buf.getvalue(), caption="Qu√©t QR ƒë·ªÉ t·∫£i APK", width=200)
    if st.button("ƒê√£ hi·ªÉu"):
        st.session_state.show_instructions = False
    st.markdown("---")

# --- Main analysis UI ---
if not st.session_state.show_report:
    # Header
    c1, c2 = st.columns([0.05,0.95])
    with c1: st.image("pic/iconfisc.png", width=64)
    with c2: st.title("Ph√¢n t√≠ch th√¥ng tin x·∫•u ƒë·ªôc")
    st.markdown("Nh·∫≠p n·ªôi dung, upload ·∫£nh, tr·∫£ l·ªùi CAPTCHA r·ªìi b·∫•m **Ph√¢n t√≠ch**.")

    # Content & images
    c1, c2 = st.columns([2,1])
    with c1:
        content = st.text_area(
            "‚úçÔ∏è Nh·∫≠p n·ªôi dung", st.session_state.content, height=200
        )
    with c2:
        uploaded = st.file_uploader(
            "üñºÔ∏è Upload ·∫£nh", type=["png","jpg","jpeg"], accept_multiple_files=True
        )
        if uploaded:
            for f in uploaded:
                st.session_state.image_files.append(f)

    # CAPTCHA + Analyze on one row
    cap_col, btn_col = st.columns([1,16])
    with cap_col:
        captcha_ans = st.text_input(
            f"üîí CAPTCHA: {st.session_state.captcha_q}",
            key="captcha_input"
        )
    with btn_col:
        analyze_clicked = st.button("üöÄ Ph√¢n t√≠ch")

    if analyze_clicked:
        # 1) CAPTCHA check
        if not captcha_ans:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p CAPTCHA.")
        elif captcha_ans != st.session_state.captcha_a:
            st.error("‚ùå CAPTCHA kh√¥ng ƒë√∫ng.")
        # 2) content/img
        elif not content and not st.session_state.image_files:
            st.warning("‚ö†Ô∏è Nh·∫≠p n·ªôi dung ho·∫∑c upload ·∫£nh.")
        else:
            # reset audio flag
            st.session_state.play_audio = False
            # save inputs
            st.session_state.content = content
            # analyze
            with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch..."):
                st.session_state.result = analyze(content, st.session_state.image_files)
                st.session_state.ready = True
            # reset CAPTCHA
            st.session_state.captcha_reset = True
            if "captcha_input" in st.session_state:
                del st.session_state["captcha_input"]

    # show result
    if st.session_state.ready:
        st.markdown("### üìã K·∫øt qu·∫£ ph√¢n lo·∫°i:")
        st.write(st.session_state.result)

        # nghe k·∫øt qu·∫£
        if st.button("üîä Nghe k·∫øt qu·∫£"):
            mp3 = text_to_speech(st.session_state.result)
            data = open(mp3,"rb").read()
            b64 = base64.b64encode(data).decode()
            st.session_state.audio_embed = (
                f"<audio controls style='width:100%;'>"
                f"<source src='data:audio/mp3;base64,{b64}' type='audio/mp3'>"
                "Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ audio."
                "</audio>"
            )
            st.session_state.play_audio = True

        if st.session_state.play_audio:
            st.markdown(st.session_state.audio_embed, unsafe_allow_html=True)

        # b√°o c√°o
        if st.button("üìù B√°o c√°o"):
            st.session_state.show_report = True

# --- Report form ---
else:
    st.title("üìù Form B√°o C√°o")
    st.markdown("Ch·ªçn lo·∫°i, th√™m th√¥ng tin v√† g·ª≠i v·ªÅ server.")

    with st.form("report_form"):
        report_type = st.selectbox("Lo·∫°i b√°o c√°o", [
            "Tin gi·∫£","Xuy√™n t·∫°c l·ªãch s·ª≠","K√≠ch ƒë·ªông b·∫°o l·ª±c",
            "Chia r·∫Ω d√¢n t·ªôc","X√∫c ph·∫°m t·ªï ch·ª©c/nh√¢n v·∫≠t","Th√¥ng tin sai s·ª± th·∫≠t"
        ])
        extra = st.text_area("üîé Th√¥ng tin b·ªï sung", height=150)
        c1,c2 = st.columns(2)
        with c1: submitted = st.form_submit_button("G·ª≠i")
        with c2: cancelled = st.form_submit_button("Hu·ª∑")

    if cancelled:
        st.session_state.show_report = False
    if submitted:
        payload = {
            "type": report_type,
            "article": st.session_state.content,
            "extra_info": extra,
            "classification": st.session_state.result
        }
        files=[]
        for f in st.session_state.image_files:
            b = f.read()
            files.append(("images",(f.name,b,f.type)))
            f.seek(0)
        try:
            r = requests.post(ADMIN_ENDPOINT,data=payload,files=files,timeout=10)
            r.raise_for_status()
            st.success("‚úÖ ƒê√£ g·ª≠i b√°o c√°o l√™n h·ªá th·ªëng.")
        except Exception as e:
            st.error(f"‚ùå L·ªói g·ª≠i: {e}")
        finally:
            st.session_state.show_report = False
